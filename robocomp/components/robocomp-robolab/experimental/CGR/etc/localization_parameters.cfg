
initialConditions = {
  mapName = "AUTONOMY";
  
  loc = vec2(3.6, 0);
  
  angle = deg2rad(0.0);
  
  locUncertainty = 0.1;
  angleUncertainty = deg2rad(4.0);
};

motionParams = {
  Alpha1 = 0.5;
  Alpha2 = deg2rad(25.0);
  Alpha3 = 0.5;
  kernelSize = 5;
};

refineParams = {
  numSteps = 3;
  minRefineFraction = 0.001;
};


lidarParams = {
  -- Default values, up-to-date values will be read from the laser scan messages received
  
  --simulador:
--  angleResolution = 4.2/100;
--  numRays = 100;
--  minAngle = -2.1;
--  maxAngle = 2.1;

  --real:
  angleResolution = deg2rad(180.0/720.0);
  numRays = 720;
  minAngle = -1.5707;
  maxAngle = 1.5707;

  maxRange = 30.0;
  minRange = 0.025;
  
  -- Default values, up-to-date values will be read from tf listener
  laserLoc = vec2(0.,0.0);
  xRot = 0;
  yRot = 0;
  zRot = 0;
  
  correlationFactor = 1.0/80000.0;
  logShortHitProb = -sq(1.5/0.03);
  lidarStdDev = sq(0.03);
  logObstacleProb = -sq(0.8/0.03);
  logOutOfRangeProb = -sq(4.0/0.03);
  kernelSize = 5.0;
  
  minPoints = 10;
  numSteps = refineParams.numSteps;
  correspondenceMargin = 0.1;
  
  etaAngle = 4*0.05;
  etaLoc = 4*0.1;
  maxAngleGradient = deg2rad(10.0);
  maxLocGradient = 0.1;
  minCosAngleError = cos(deg2rad(30.0));
  attractorRange = 0.5;
  minRefineFraction = refineParams.minRefineFraction;
};

pointCloudParams = {
  correspondenceMargin = 0.1;
  etaAngle = 0.05;
  etaLoc = 0.05;
  minPoints = 100;
  minRefineFraction = refineParams.minRefineFraction;

  maxAngleGradient  = deg2rad(45.0)/refineParams.numSteps;
  maxLocGradient = 0.75/refineParams.numSteps;
  numSteps = 6;
  minRange = 0.1;
  maxRange = 10.0;

  attractorRange = 0.75; 
  minCosAngleError  = cos(deg2rad(30.0));
  
  
  correlationFactor = 1.0/80000.0;
  logShortHitProb = -sq(1.5/0.2);
  stdDev = sq(0.2);
  logObstacleProb = -sq(1.8/0.2);
  logOutOfRangeProb = sq(4.0/0.2);
  kernelSize = 5.0;
};
