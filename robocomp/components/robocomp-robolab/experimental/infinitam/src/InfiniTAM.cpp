// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `InfiniTAM.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <InfiniTAM.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

}
::IceProxy::Ice::Object* ::IceProxy::RoboCompInfiniTAM::upCast(::IceProxy::RoboCompInfiniTAM::InfiniTAM* p) { return p; }

void
::IceProxy::RoboCompInfiniTAM::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompInfiniTAM::InfiniTAM>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompInfiniTAM::InfiniTAM;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::RoboCompInfiniTAM::InfiniTAM::ice_staticId()
{
    return ::RoboCompInfiniTAM::InfiniTAM::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::RoboCompInfiniTAM::InfiniTAM::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::RoboCompInfiniTAM::InfiniTAM);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::RoboCompInfiniTAM::InfiniTAM::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::RoboCompInfiniTAM::InfiniTAM);
}

::IceProxy::Ice::Object*
IceProxy::RoboCompInfiniTAM::InfiniTAM::__newInstance() const
{
    return new InfiniTAM;
}

::Ice::Object* RoboCompInfiniTAM::upCast(::RoboCompInfiniTAM::InfiniTAM* p) { return p; }

namespace
{
const ::std::string __RoboCompInfiniTAM__InfiniTAM_ids[2] =
{
    "::Ice::Object",
    "::RoboCompInfiniTAM::InfiniTAM"
};

}

bool
RoboCompInfiniTAM::InfiniTAM::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RoboCompInfiniTAM__InfiniTAM_ids, __RoboCompInfiniTAM__InfiniTAM_ids + 2, _s);
}

::std::vector< ::std::string>
RoboCompInfiniTAM::InfiniTAM::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RoboCompInfiniTAM__InfiniTAM_ids[0], &__RoboCompInfiniTAM__InfiniTAM_ids[2]);
}

const ::std::string&
RoboCompInfiniTAM::InfiniTAM::ice_id(const ::Ice::Current&) const
{
    return __RoboCompInfiniTAM__InfiniTAM_ids[1];
}

const ::std::string&
RoboCompInfiniTAM::InfiniTAM::ice_staticId()
{
    return __RoboCompInfiniTAM__InfiniTAM_ids[1];
}

void
RoboCompInfiniTAM::InfiniTAM::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RoboCompInfiniTAM::InfiniTAM::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RoboCompInfiniTAM::__patch(InfiniTAMPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompInfiniTAM::InfiniTAMPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompInfiniTAM::InfiniTAM::ice_staticId(), v);
    }
}
